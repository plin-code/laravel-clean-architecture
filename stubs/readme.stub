# Clean Architecture - Documentation

This documentation describes the Clean Architecture structure implemented in the project.

## Folder structure

```
app/
├── Application/
│   ├── Actions/          # Application use cases
│   ├── Services/         # Application services
│   ├── Jobs/            # Asynchronous jobs
│   ├── Console/         # Console commands
│   └── Listeners/       # Event listeners
├── Domain/              # Business logic
│   └── Shared/          # Shared classes between domains
└── Infrastructure/      # Implementation details
    ├── API/
    │   ├── Controllers/ # API controllers
    │   ├── Requests/    # Form requests
    │   └── Resources/   # API resources
    ├── UI/
    │   └── Web/        # Web controllers
    ├── Mail/           # Mail classes
    ├── Notifications/  # Notifications
    ├── Observers/      # Model observers
    ├── Exceptions/     # Custom exceptions
    └── Middleware/     # Middleware
```

## Principles

### 1. Domain Layer
- Contains pure business logic
- Does not depend on frameworks or external libraries
- Includes entities, value objects, domain events

### 2. Application Layer
- Use case orchestration
- Depends only on Domain Layer
- Includes actions and application services

### 3. Infrastructure Layer
- Implementation of technical details
- Depends on Application and Domain Layers
- Includes controllers, repositories, external services

## Available commands

- `php artisan clean-arch:make-domain {name}` - Create a new domain
- `php artisan clean-arch:make-action {name} {domain}` - Create a new action
- `php artisan clean-arch:make-service {name}` - Create a new service
- `php artisan clean-arch:make-controller {name}` - Create a new controller

## Best Practices

1. **Separation of Concerns**: Each class has a single responsibility
2. **Dependency Inversion**: Depend on abstractions, not concrete implementations
3. **Domain Events**: Use events to communicate between domains
4. **Validation**: Always validate input data
5. **Testing**: Write tests for every layer

## Examples

### Creating a new domain
```bash
php artisan clean-arch:make-domain Product
```

### Using an action
```php
class ProductsController extends Controller
{
    public function store(CreateProductRequest $request): JsonResponse
    {
        $product = $this->createProductAction->execute($request);
        return new ProductResource($product);
    }
}
``` 